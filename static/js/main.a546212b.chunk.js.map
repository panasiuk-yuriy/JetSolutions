{"version":3,"sources":["helpers/tiles.ts","store/tiles.ts","store/prevTile.ts","store/counter.ts","store/index.ts","components/Tile/Tile.tsx","components/RestartGame/RestartGame.tsx","App.tsx","index.tsx"],"names":["tiles","id","color","isOpen","nowOpen","reducer","state","action","type","map","tile","changePrevTile","count","getTiles","getPrevTile","prevTile","getCouter","counter","rootReducer","combineReducers","tilesReducer","prevTileReducer","couterReducer","persistedState","localStorage","getItem","JSON","parse","store","createStore","composeWithDevTools","subscribe","setItem","stringify","getState","Tile","useSelector","dispatch","useDispatch","style","backgroundColor","className","onClick","changeTileStatus","RestartGame","App","every","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a546212b.chunk.js","sourcesContent":["export const tiles: Tile[] = [\n  {\n    id: 1,\n    color: 'green',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 2,\n    color: 'hotpink',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 3,\n    color: 'red',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 4,\n    color: 'brown',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 5,\n    color: 'green',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 6,\n    color: 'blue',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 7,\n    color: 'yellow',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 8,\n    color: 'brown',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 9,\n    color: 'orange',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 10,\n    color: 'blue',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 11,\n    color: 'rebeccapurple',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 12,\n    color: 'hotpink',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 13,\n    color: 'rebeccapurple',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 14,\n    color: 'yellow',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 15,\n    color: 'orange',\n    isOpen: false,\n    nowOpen: false,\n  },\n  {\n    id: 16,\n    color: 'red',\n    isOpen: false,\n    nowOpen: false,\n  },\n]","import { AnyAction } from 'redux';\nimport { tiles } from '../helpers/tiles';\n\nconst CHANGE_TILE_STATUS = 'CHANGE_TILE_STATUS';\nconst CHECK_TILES = 'CHECK_TILES';\nconst RESTART_GAME = 'RESTART_GAME'\n\nexport const changeTileStatus = (tile :Tile) => ({ type: CHANGE_TILE_STATUS, tile });\nexport const checkTiles = (color: string) => ({ type: CHECK_TILES, color });\nexport const restartGame = () => ({ type: RESTART_GAME });\n\nconst reducer = (state = tiles, action: AnyAction) => {\n  switch (action.type) {\n\n    case CHANGE_TILE_STATUS:\n      return state.map(tile => {\n        if (tile.id === action.tile.id) {\n          return {...tile, nowOpen: true}\n        } else {\n          return {...tile, nowOpen: false}\n        }\n      })\n    \n    case CHECK_TILES:\n    return state.map(tile => {\n      if (tile.color === action.color) {\n        return {...tile, isOpen: true,}\n      } else {\n        return tile\n      }\n    })\n\n    case RESTART_GAME:\n    return state.map(tile => {\n      return {...tile, isOpen: false, nowOpen: false}\n    })\n    \n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nconst CHANGE_PREV_TILE = 'CHANGE_PREV_TILE';\n\nexport const changePrevTile = (tile: Tile | null) => ({ type: CHANGE_PREV_TILE, tile });\n\nconst reducer = (tile = null, action: AnyAction) => {\n  switch (action.type) {\n    case CHANGE_PREV_TILE:\n     return action.tile;\n\n    default:\n      return tile;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nconst CHANGE_COUNT = 'CHANGE_COUNT';\nconst DEFAULT_COUNT = 'DEFAULT_COUNT'\n\nexport const changeCount = () => ({ type: CHANGE_COUNT});\nexport const setDefaultCount = () => ({ type: DEFAULT_COUNT});\n\nconst reducer = (count = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHANGE_COUNT:\n     return count + 1;\n    \n    case DEFAULT_COUNT:\n     return count = 0;\n\n    default:\n      return count;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport tilesReducer from './tiles';\nimport prevTileReducer from './prevTile';\nimport couterReducer from './counter';\n\nexport const getTiles = (state: RootState) => state.tiles;\nexport const getPrevTile = (state: RootState) => state.prevTile;\nexport const getCouter = (state: RootState) => state.counter;\n\nconst rootReducer = combineReducers(\n  {\n    tiles: tilesReducer,\n    prevTile: prevTileReducer,\n    counter: couterReducer\n  },\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst persistedState = localStorage.getItem('reduxState')\n  ? JSON.parse(localStorage.getItem('reduxState') || '')\n  : {};\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeWithDevTools(),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","import React, { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeTileStatus, checkTiles } from '../../store/tiles';\nimport { changePrevTile } from '../../store/prevTile';\nimport { changeCount } from '../../store/counter';\nimport { getPrevTile } from '../../store/index';\nimport './Tile.scss';\n\ninterface Props {\n  tile: Tile;\n}\n\nexport const Tile: React.FC<Props> = ({ tile }) => {\n  const prevTile = useSelector(getPrevTile);\n  const dispatch = useDispatch()\n\n\n  const handlerClick = () => {\n    dispatch(changeTileStatus(tile))\n    dispatch(changeCount())\n    if (!prevTile) {\n      dispatch(changePrevTile(tile))\n    }\n\n    if (prevTile && prevTile.color === tile.color) {\n      dispatch(checkTiles(tile.color))\n      dispatch(changePrevTile(null))\n    }\n\n    if (prevTile && prevTile.color !== tile.color) {\n      dispatch(changePrevTile(tile))\n    } \n  };\n\n  return (\n    <>\n      {(tile.nowOpen || tile.isOpen) ? (\n        <div \n          style={{ backgroundColor: tile.color}}\n          className={tile.isOpen ? 'tile-open' : 'tile flip-vertical-left '} >\n\n        </div>) : (\n          <div className='tile' onClick={() => handlerClick()}>\n\n        </div>)}\n\n    </>\n  );\n}\n\n","import React from 'react';\nimport {restartGame} from '../../store/tiles'\nimport {setDefaultCount} from '../../store/counter'\nimport { useDispatch } from 'react-redux';\nimport './RestartGame.scss';\n\nexport const RestartGame = () => {\n  const dispatch = useDispatch() \n  \n  const handlerClick = () => {\n    dispatch(restartGame())\n    dispatch(setDefaultCount())\n  }\n\n  return (\n    <>\n    <button className=\"restart_btn\"\n    onClick={() => handlerClick()}>\n      Restart game\n    </button>\n    </>\n  );\n}\n\n","import React from 'react';\nimport './App.scss';\nimport { Tile } from './components/Tile/Tile';\nimport { getTiles, getCouter } from './store/index';\nimport { useSelector } from 'react-redux';\nimport { RestartGame } from './components/RestartGame/RestartGame';\n\nfunction App() {\n  const tiles: Tile[] = useSelector(getTiles);\n  const counter: number = useSelector(getCouter);\n\n  return (\n    <main className=\"tiles\">\n      <div className=\"tiles__score\">\n        <p className=\"tiles__score--title\">Number of attempts:</p>\n        <h3 className=\"tiles__couter\">{counter}</h3>\n      </div>\n      {tiles.every((tile: Tile) => tile.isOpen)\n        ? <RestartGame />\n        : (\n          <div className=\"tiles__container\">\n            {tiles.map((tile: Tile) => (\n              <Tile key={tile.id} tile={tile} />\n            ))}\n          </div>\n          )\n      }\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}